#!/usr/bin/perl
use strict;
use warnings;

my $init = -1;
my $formula = ""; my $nformula;
# my $read;

sub parse_tgdra_state {
  /state (\d+): \"\[(.*)\]\"/;
  print "$1 [label=\"$1\\n$2\"]\n";
  return $1;
}

sub parse_tgdra_transition {
  /(.+) -> (\d+)\s+(\S.*)?$/;
  print " -> $2 [label=\"$1\\n$3\"]\n" if ($3);
  print " -> $2 [label=\"$1\"]\n" if (!$3);
}

sub process_tgdra {
  my $current_state;
  while (<>) {
    last if (/^$/);
    $init = $1 if (/Init: (\d+)/);
    if (/state/) {
      print "\n";
      $current_state = parse_tgdra_state $_;
    }
    if (/->/) {
      print $current_state;
      parse_tgdra_transition $_;
    }
  }
}

## Prepares node with formulas for the states of MMAA ##
sub process_alt {
  my $label = "";
  my $node = "Alt [shape=box,label=\"Alternating states:\\n";
  while (<>) {
    last if /^$/;
    $label .= "$1 = $2\\n" if /state (\d+) : (.*)$/;
  }
  $node .= $label."\"]";
  return $node;
}

## Extracts the Z_sets ##
sub process_alt_Z {
  my $z_label = <>;
  my $node;
  chomp($z_label);
  $node = "Z [shape=box,label=\"Z sets:\\n".$z_label."\"]\n";
  return $node;
}


my $alt_node;
my $z_node;
my $form_node;

sub print_info {
  print <<EOF;
  subgraph info {
    rank=same;
    $form_node
    $alt_node
    $z_node
    formula -> Alt[style=invis]
    Alt -> Z[style=invis]
  }
EOF
}

sub process_formula {
  $formula = $_;
  chomp($formula);
  $nformula = <>;
  chomp($nformula);
  return "formula [shape=box,label=\"Formula: $formula\\n$nformula\"]\n";
}


while (<>) {
 if (/formula: (.*)$/) {
   $form_node = process_formula $1;
 }
 if (/Alternating/ && /after/) {
   $alt_node = process_alt;
 }
 if (/Z_set:/) {
   $z_node = process_alt_Z;
 }
 if (/^TGDRA/ && !/before/) {
   print "digraph automat {\n";
   print_info;
   print "subgraph automaton {\n";
   process_tgdra;
   print <<EOF;
  formula -> $init\[style=invis\]
  }
EOF
#  Alt -> $init\[style=invis\]
#  Z -> $init\[style=invis\]
   last;
 }
}
## Makes the initial node circled twice ##
print "$init [peripheries=2]\n" unless $init == -1;

## Ends the dot automaton ## 
print "}\n";

